package framework.utility.reporter;

import application.TestBase;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.MediaEntityBuilder;
import com.aventstack.extentreports.Status;
import com.aventstack.extentreports.markuputils.ExtentColor;
import com.aventstack.extentreports.markuputils.MarkupHelper;
import com.aventstack.extentreports.reporter.ExtentSparkReporter;
import com.aventstack.extentreports.reporter.configuration.Theme;
import com.aventstack.extentreports.reporter.configuration.ViewName;
import framework.driver.UiDriver;
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.net.HostIdentifier;
import org.testng.Reporter;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.charset.Charset;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import static framework.utility.loggerator.Logger.getLogger;
import static org.apache.commons.codec.binary.Base64.encodeBase64String;

public class CustomExtentReport extends TestBase {
	private static final ExtentReports extentReports;
	private static final ThreadLocal<ExtentTest> extent_test = new ThreadLocal<>();
	private static String dateName;

	static {
		DateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd");
		Date date = new Date();
		dateName = dateFormat.format(date);
		extentReports = new ExtentReports();
		String path = System.getProperty("user.dir") + "/reports/TestReport_"+dateName+".html";

		ExtentSparkReporter reporter = new ExtentSparkReporter(path);
		reporter.viewConfigurer().viewOrder()
				.as(new ViewName[] { ViewName.DASHBOARD, ViewName.TEST, ViewName.CATEGORY })
				.apply();
		reporter.config().setTheme(Theme.DARK);
		reporter.config().setReportName("Internet Herokuapp test execution report");
		reporter.config().setDocumentTitle("Internet Herokuapp test report");
		extentReports.attachReporter(reporter);
		extentReports.setSystemInfo("Project", "Internet Herokuapp");
		extentReports.setSystemInfo("os", System.getProperty("os.name"));
	}

	private static String getScreenShot(String fileName) {
		TakesScreenshot ts = (TakesScreenshot) UiDriver.getWebDriver();
		File screenShotSrc = ts.getScreenshotAs(OutputType.FILE);
		String destinationFile = System.getProperty("user.dir") + "/reports/screenshots/" + fileName + ".png";
		try {
			FileUtils.copyFile(screenShotSrc, new File(destinationFile));
		} catch (IOException e) {
			getLogger().error("Screenshot was not copied", e);
		}
		return "screenshots/" + fileName + ".png";
	}

	public static String takeScreenshot(String ScreenshotFileFolder, String ScreenshotFileName) {
//		DateFormat dateFormat = new SimpleDateFormat("yyyy_MM_dd");
//		Date date = new Date();
//		String dateName = dateFormat.format(date);
		String filePathExtent = System.getProperty("user.dir") + "/reports/Screenshots/"+dateName+"/"
				+ScreenshotFileFolder+"/" +ScreenshotFileName+ ".png";
//        String filePathExtent = System.getProperty("user.dir") + "/reports/Screenshots/" + "Web" + "_" + dateName + ".png";
		String filePath = filePathExtent;
		String encodedBase64=null;
		try {
			File screenshotFile = ((TakesScreenshot) UiDriver.getWebDriver()).getScreenshotAs(OutputType.FILE);
			FileInputStream fileInputStreamReader ;
			fileInputStreamReader = new FileInputStream(screenshotFile);
			byte[] bytes = new byte[(int) screenshotFile.length()];
			fileInputStreamReader.read(bytes);
			encodedBase64 = encodeBase64String(bytes);

			FileUtils.copyFile(screenshotFile, new File(filePath));
		}catch (IOException e){
			e.getStackTrace();
			Reporter.log("Failed To Take screenshot " + e, true);
		}
		catch (NullPointerException npe){
			npe.getStackTrace();
			Reporter.log("Failed To Take screenshot as driver is closed Unexpectedly" + npe, true);
		}
		catch (org.openqa.selenium.TimeoutException toe){
			toe.getStackTrace();
			Reporter.log("Timeout while trying To Take screenshot " + toe, true);
			encodedBase64 ="";
			// added "Issue occured "org.openqa.selenium.TimeoutException: timeout: Timed out receiving message from renderer" while taking screenshot." msg
		}
		return encodedBase64;
	}

	public static void startTest(String className,String methodName) {
		extent_test.set(extentReports.createTest(methodName).assignCategory(className));
	}

	public static void stopSuccessTest(String message) {
		extent_test.get().log(Status.PASS, "Test Passed for "+message);
	}

	public static void stopFailedTest(String methodName, Throwable throwable) {
		extent_test.get().fail(throwable);
		// CPB-2874 In case of webdriver not present and screenshot could not be taken then showing screenshot with
		// "Instance web driver is not present. It might be closed Unexpectedly. Please check." message.
		extent_test.get().addScreenCaptureFromBase64String(CustomExtentReport.takeScreenshot(methodName,"testFailure" )==null?
		""
		:CustomExtentReport.takeScreenshot(methodName,"testFailure" )  );
	}

	public static void stopSkippedTest(String groupDescription, List<String> groupDependUpon) {
		extent_test.get().log(Status.SKIP, "Test `" + groupDescription + "` is SKIPPED. Depends upon: "+groupDependUpon);

	}

	private static String getPageSource(String ScreenshotFileFolder, String fileName) {
		String destinationFile = System.getProperty("user.dir") + "/reports/screenshots/"+dateName+"/"
				+ScreenshotFileFolder+"/"+ fileName + ".html";
		File file = new File(destinationFile);
		try {
			file.createNewFile();
			FileUtils.writeStringToFile(file, UiDriver.getWebDriver().getPageSource(), Charset.defaultCharset());
		} catch (IOException e) {
			getLogger().error("Screenshot was not copied", e);
		}
		return "screenshots/" + fileName + ".html";
	}

	public static void finishRun() {
		extentReports.setSystemInfo("HOST", HostIdentifier.getHostName().equals("ANIL") ? "LocalHost" : HostIdentifier.getHostName() + " / "+HostIdentifier.getHostAddress());
		extentReports.setSystemInfo("Environment",TestBase.setUp.getAppUrl());
		extentReports.setSystemInfo("Browser", TestBase.setUp.getBrowserType());
		extentReports.setSystemInfo("Browser Version", TestBase.setUp.getBrowserDriverVersion());
		extentReports.flush();
	}


	public static void writeSteps(String status, String stepDesc, String media) {
		try{
			switch(status.toUpperCase()){
				case "PASS":
//                    needed to embed image in html so used base64encoded data
					if (TestBase.setUp.getExcludeScreenshot().equalsIgnoreCase("true")) {
						extent_test.get().pass(stepDesc);
					} else {
						extent_test.get().pass(stepDesc, MediaEntityBuilder.createScreenCaptureFromBase64String(media).build());
					}
					break;

				case "FAIL":
					extent_test.get().fail(stepDesc, MediaEntityBuilder.createScreenCaptureFromBase64String(media).build());
					break;

				case "INFO":
					extent_test.get().info(MarkupHelper.createLabel(stepDesc.toUpperCase(), ExtentColor.BLUE));
					break;
			}
		}catch(Exception e){
			e.printStackTrace();
		}

	}


	public static void writeSteps(String status, String stepDesc) {
		DateFormat dateFormat = new SimpleDateFormat("HH_mm_ss");
		Date date = new Date();
		String dateName = dateFormat.format(date);
		System.out.println("datename:::::"+dateName);
		try{
			switch(status.toUpperCase()){
				case "PASS":
//                    needed to embed image in html so used base64encoded data
					if (TestBase.setUp.getExcludeScreenshot().equalsIgnoreCase("true")) {
						extent_test.get().pass(stepDesc);
					} else {
						extent_test.get().pass(stepDesc, MediaEntityBuilder.createScreenCaptureFromBase64String(takeScreenshot(TestBase.methodName, "pass_SS_" + dateName)).build());
					}
//					test.pass(stepDesc, MediaEntityBuilder.createScreenCaptureFromBase64String(takeScreenshot(TestBase.methodName,"pass_SS_"+dateName)).build());
//                    test.pass(stepDesc, MediaEntityBuilder.createScreenCaptureFromPath(screenShot(driver)).build());
					break;

				case "FAIL":
					extent_test.get().fail(stepDesc, MediaEntityBuilder.createScreenCaptureFromBase64String(takeScreenshot(TestBase.methodName,"fail_SS_"+dateName)).build());
//                    test.fail(stepDesc, MediaEntityBuilder.createScreenCaptureFromPath(screenShot(driver)).build());
					break;

				case "INFO":
					extent_test.get().info(MarkupHelper.createLabel(stepDesc.toUpperCase(), ExtentColor.BLUE));
					break;
			}
		}catch(Exception e){
			getLogger().error(String.valueOf(e));
		}


	}
}